/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,22],$Vb=[5,14,15,21,25,28,30,63,64,65,66,67,68],$Vc=[1,30],$Vd=[1,40],$Ve=[1,48],$Vf=[1,49],$Vg=[1,47],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[18,19,31,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56],$VE=[18,31],$VF=[1,108],$VG=[18,19,31,44,46,47,48,49,50,51,52,53,55,56],$VH=[18,19,31,40,41,44,46,47,48,49,50,51,52,53,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FUNCPRINT":7,"INSDECLARAR":8,"INSASIGNAR":9,"LLAMARFUNCION":10,"GUARDARFUNCION":11,"INSTIF":12,"INSWHILE":13,"RMAIN":14,"RPRINT":15,"PAIZQ":16,"EXPRESION":17,"PADER":18,"PCOMA":19,"TIPO":20,"ID":21,"IGUAL":22,"INSSTATEMENT":23,"PARAMETROS":24,"RIF":25,"INSTELSE":26,"RELSE":27,"RWHILE":28,"LLAVEIZQ":29,"LLAVEDER":30,"COMA":31,"PARAMETRO":32,"PRIMITIVO":33,"RELACIONAL":34,"LOGICO":35,"ACCEDERVARIABLE":36,"INCREMENTODECREMENTO":37,"ARITMETICA":38,"ARGUMENTOS":39,"MAS":40,"MENOS":41,"POR":42,"DIVISION":43,"POTENCIA":44,"MODULO":45,"IGUALIGUAL":46,"DIFERENTE":47,"MENORQUE":48,"MENORIGUAL":49,"MAYORQUE":50,"MAYORIGUAL":51,"AND":52,"OR":53,"NOT":54,"INCREMENTO":55,"DECREMENTO":56,"ENTERO":57,"DECIMAL":58,"CADENA":59,"CARACTER":60,"RTRUE":61,"RFALSE":62,"RINT":63,"RDOUBLE":64,"RCHAR":65,"RSTRING":66,"RBOOLEAN":67,"RVOID":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"RMAIN",15:"RPRINT",16:"PAIZQ",18:"PADER",19:"PCOMA",21:"ID",22:"IGUAL",25:"RIF",27:"RELSE",28:"RWHILE",29:"LLAVEIZQ",30:"LLAVEDER",31:"COMA",40:"MAS",41:"MENOS",42:"POR",43:"DIVISION",44:"POTENCIA",45:"MODULO",46:"IGUALIGUAL",47:"DIFERENTE",48:"MENORQUE",49:"MENORIGUAL",50:"MAYORQUE",51:"MAYORIGUAL",52:"AND",53:"OR",54:"NOT",55:"INCREMENTO",56:"DECREMENTO",57:"ENTERO",58:"DECIMAL",59:"CADENA",60:"CARACTER",61:"RTRUE",62:"RFALSE",63:"RINT",64:"RDOUBLE",65:"RCHAR",66:"RSTRING",67:"RBOOLEAN",68:"RVOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,5],[8,3],[8,5],[9,4],[11,5],[11,6],[12,6],[26,2],[26,2],[26,0],[13,5],[23,3],[24,3],[24,1],[32,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[10,4],[10,5],[39,3],[39,1],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[35,3],[35,3],[35,2],[36,1],[37,2],[37,2],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 25: case 37:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 19: case 20: case 27: case 28: case 29: case 30: case 31: case 32:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = new InsMain($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 12:
 this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 13:
 this.$ = new Declaration($$[$0-1],$$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 14:
 this.$ = new Declaration($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 15:
 this.$ = new AsignarValor($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 16:
 this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 17:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 18:
this.$ = new InsIf($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 21:
 this.$ = null;
break;
case 22:
 this.$ = new InWhile($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 23:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 24: case 36:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 26:
 this.$ = new Parametros($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 33:
 this.$ = $$[$0-1]; 
break;
case 34:
 this.$ = new LlamadaFuncion($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 35:
 this.$ = new LlamadaFuncion($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 40:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 43:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 44:
 this.$ = new Aritmetica($$[$0],$$[$0],tipoAritmetica.MENOSUNARIO,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 45:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.IGUALACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 46:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 47:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 48:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 49:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 50:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 51:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 52:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 53:
 this.$ = new Logica($$[$0],$$[$0],tipoLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 54:
this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$ = new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 56:
this.$ = new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 57:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.INT);
break;
case 58:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.DOUBLE);
break;
case 59:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.STRING);
break;
case 60:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.CHAR);
break;
case 61: case 62:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.BOOLEAN);
break;
case 63:
this.$ = tipo.INT;
break;
case 64:
this.$ = tipo.DOUBLE;
break;
case 65:
this.$ = tipo.CHAR;
break;
case 66:
this.$ = tipo.STRING;
break;
case 67:
this.$ = tipo.BOOLEAN;
break;
case 68:
this.$ = tipo.VOID;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,20:13,21:$V2,25:$V3,28:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},{1:[3]},{5:[1,23],6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,20:13,21:$V2,25:$V3,28:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),{10:25,21:[1,26]},{16:[1,27]},{21:[1,28]},{16:$Vc,22:[1,29]},{16:[1,31]},{16:[1,32]},{21:[2,63]},{21:[2,64]},{21:[2,65]},{21:[2,66]},{21:[2,67]},{21:[2,68]},{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,11]),{16:$Vc},{16:$Vd,17:33,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:[1,52],19:[1,50],22:[1,51]},{16:$Vd,17:53,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:56,18:[1,54],21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,39:55,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:57,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:58,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{18:[1,59],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),{16:$Vd,17:76,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),{16:$Vd,17:77,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($VD,[2,54]),{16:$Vd,17:78,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($Vb,[2,13]),{16:$Vd,17:79,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{18:[1,80],20:83,24:81,32:82,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},{19:[1,84],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},{19:[1,85]},{18:[1,86],31:[1,87]},o($VE,[2,37],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC}),{18:[1,88],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},{18:[1,89],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},{19:[1,90]},{16:$Vd,17:91,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:92,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:93,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:94,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:95,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:96,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:97,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:98,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},o($VD,[2,55]),o($VD,[2,56]),{16:$Vd,17:99,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:100,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:101,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:102,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:103,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{16:$Vd,17:104,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{18:[1,105],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},o($VD,[2,53]),o($VD,[2,44]),{19:[1,106],40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC},{23:107,29:$VF},{18:[1,109],31:[1,110]},o($VE,[2,25]),{21:[1,111]},o($Vb,[2,15]),o($Vb,[2,34]),{19:[1,112]},{16:$Vd,17:113,21:$Ve,33:34,34:35,35:36,36:37,37:38,38:39,41:$Vf,54:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,62:$Vm},{23:114,29:$VF},{23:115,29:$VF},o($Vb,[2,12]),o($VG,[2,45],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o($VG,[2,46],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o($VG,[2,47],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o($VG,[2,48],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o($VG,[2,49],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o($VG,[2,50],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs}),o([18,19,31,44,52,53],[2,51],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,55:$VB,56:$VC}),o([18,19,31,44,53],[2,52],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,55:$VB,56:$VC}),o($VH,[2,38],{42:$Vp,43:$Vq,45:$Vs}),o($VH,[2,39],{42:$Vp,43:$Vq,45:$Vs}),o($VD,[2,40]),o($VD,[2,41]),o([18,19,31,44],[2,42],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC}),o($VD,[2,43]),o($VD,[2,33]),o($Vb,[2,14]),o($Vb,[2,16]),{4:116,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,20:13,21:$V2,25:$V3,28:$V4,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},{23:117,29:$VF},{20:83,32:118,63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},o($VE,[2,26]),o($Vb,[2,35]),o($VE,[2,36],{40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw,50:$Vx,51:$Vy,52:$Vz,53:$VA,55:$VB,56:$VC}),o($Vb,[2,21],{26:119,27:[1,120]}),o($Vb,[2,22]),{6:24,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,15:$V1,20:13,21:$V2,25:$V3,28:$V4,30:[1,121],63:$V5,64:$V6,65:$V7,66:$V8,67:$V9,68:$Va},o($Vb,[2,17]),o($VE,[2,24]),o($Vb,[2,18]),{12:123,23:122,25:$V3,29:$VF},o([5,14,15,21,25,27,28,30,63,64,65,66,67,68],[2,23]),o($Vb,[2,19]),o($Vb,[2,20])],
defaultActions: {17:[2,63],18:[2,64],19:[2,65],20:[2,66],21:[2,67],22:[2,68],23:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("./Instructions/Print");
    const {Primitivo} = require("./Expressions/Primitivo");
    const {tipo} = require("./abstract/Return");
    const {Declaration} = require("./Instructions/Declaration");
    const {Acceso} = require("./Expressions/Acceso");
    const {Aritmetica} = require("./Expressions/Aritmetica");
    const {tipoAritmetica} = require("./utils/TipoAritmetica");
    const {Statement} = require("./Instructions/Statement");
    const {Funcion} = require("./Instructions/Funcion");
    const {Parametros} = require("./Expressions/Parametros");
    const {LlamadaFuncion} = require("./Expressions/LlamadaFuncion");
    const {Relacional} = require("./Expressions/Relacional");
    const {tipoRelacional} = require("./utils/TipoRelacional");
    const {Logica} = require("./Expressions/Logica");
    const {tipoLogico} = require("./utils/TipoLogico");
    const {InsIf} = require("./Instructions/InsIf");
    const {InWhile} = require("./Instructions/InsWhile");
    const {InsMain} = require("./Instructions/Main");
    const {AsignarValor} = require("./Instructions/AsignarValor");
    const {Incremento} = require("./Expressions/Incremento");
    const {Decremento} = require("./Expressions/Decremento");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 19;
break;
case 5:return 16;
break;
case 6:return 18;
break;
case 7:return "PUNTO";
break;
case 8:return "DOSPUNTOS";
break;
case 9:return "COMA";
break;
case 10:return "CORIZQ";
break;
case 11:return "CORDER";
break;
case 12:return "LLAVEIZQ";
break;
case 13:return "LLAVEDER";
break;
case 14:return "IGUALIGUAL";
break;
case 15:return "MENORIGUAL";
break;
case 16:return "MAYORIGUAL";
break;
case 17:return "INCREMENTO";
break;
case 18:return "DECREMENTO";
break;
case 19:return "IGUAL";
break;
case 20:return "RPRINT"; 
break;
case 21:return "RTRUE";
break;
case 22:return "RFALSE";
break;
case 23:return "RIF";
break;
case 24:return "RELSE";
break;
case 25:return "RWHILE";
break;
case 26:return "RMAIN";
break;
case 27:return "RINT";
break;
case 28:return "RDOUBLE";
break;
case 29:return "RCHAR";
break;
case 30:return "RSTRING";
break;
case 31:return "RBOOLEAN";
break;
case 32:return "RVOID";
break;
case 33:return "MAS";
break;
case 34:return "MENOS";
break;
case 35:return "POR";
break;
case 36:return "DIVISION";
break;
case 37:return "POTENCIA";
break;
case 38:return "MODULO";
break;
case 39:return "DIFERENTE";
break;
case 40:return "MENORQUE";
break;
case 41:return "MAYORQUE";
break;
case 42:return "AND";
break;
case 43:return "OR";
break;
case 44:return "NOT";
break;
case 45:return "ID";
break;
case 46:return "DECIMAL";
break;
case 47:return "ENTERO";
break;
case 48:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 60;
break;
case 49:cadena = ""; this.begin("string");
break;
case 50:cadena += yy_.yytext;
break;
case 51:cadena += "\"";
break;
case 52:cadena += "\n";
break;
case 53:cadena += "\t";
break;
case 54:cadena += "\\";
break;
case 55:cadena += "\'";
break;
case 56:yy_.yytext=cadena; this.popState(); return 59;
break;
case 57:return "EOF";
break;
case 58:console.error('Este es un error Léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yyloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:main\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[50,51,52,53,54,55,56],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}