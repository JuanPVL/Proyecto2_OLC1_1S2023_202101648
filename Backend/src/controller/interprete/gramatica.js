/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[5,19,20,21,22,27,32,35,36,37,38,40,85,86,87,88,89,90],$Vh=[1,44],$Vi=[1,43],$Vj=[1,45],$Vk=[1,46],$Vl=[1,50],$Vm=[1,66],$Vn=[1,74],$Vo=[1,75],$Vp=[1,73],$Vq=[1,76],$Vr=[1,77],$Vs=[1,78],$Vt=[1,79],$Vu=[1,80],$Vv=[1,81],$Vw=[1,82],$Vx=[1,67],$Vy=[1,68],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,85],$VE=[1,86],$VF=[11,25,41,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,100],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,104],$VR=[1,105],$VS=[1,106],$VT=[1,107],$VU=[2,75],$VV=[5,19,20,21,22,23,27,32,35,36,37,38,40,56,69,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],$VW=[25,41],$VX=[11,25,41,59,61,62,63,64,65,66,67,68],$VY=[11,25,41,55,56,59,61,62,63,64,65,66,67,68],$VZ=[1,188];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FUNCPRINT":7,"INSDECLARAR":8,"INSASIGNAR":9,"LLAMARFUNCION":10,"PCOMA":11,"GUARDARFUNCION":12,"INSTIF":13,"INSWHILE":14,"INSDOWHILE":15,"INSFOR":16,"INCREMENTODECREMENTO":17,"RETORNO":18,"RCONTINUE":19,"RBREAK":20,"RMAIN":21,"RPRINT":22,"PAIZQ":23,"EXPRESION":24,"PADER":25,"TIPO":26,"ID":27,"IGUAL":28,"ASIGNARFOR":29,"INSSTATEMENT":30,"PARAMETROS":31,"RIF":32,"INSTELSE":33,"RELSE":34,"RWHILE":35,"RDO":36,"RFOR":37,"RRETURN":38,"LLAVEIZQ":39,"LLAVEDER":40,"COMA":41,"PARAMETRO":42,"PRIMITIVO":43,"RELACIONAL":44,"LOGICO":45,"ACCEDERVARIABLE":46,"ARITMETICA":47,"TOLOWERUPPER":48,"REDONDEO":49,"TRUNCAR":50,"ELENGTH":51,"ETYPEOF":52,"ETOSTRING":53,"ARGUMENTOS":54,"MAS":55,"MENOS":56,"POR":57,"DIVISION":58,"POTENCIA":59,"MODULO":60,"IGUALIGUAL":61,"DIFERENTE":62,"MENORQUE":63,"MENORIGUAL":64,"MAYORQUE":65,"MAYORIGUAL":66,"AND":67,"OR":68,"NOT":69,"INCREMENTO":70,"DECREMENTO":71,"RTOLOWER":72,"RTOUPPER":73,"RROUND":74,"RTRUNCATE":75,"RLENGTH":76,"RTYPEOF":77,"RTOSTRING":78,"ENTERO":79,"DECIMAL":80,"CADENA":81,"CARACTER":82,"RTRUE":83,"RFALSE":84,"RINT":85,"RDOUBLE":86,"RCHAR":87,"RSTRING":88,"RBOOLEAN":89,"RVOID":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"PCOMA",19:"RCONTINUE",20:"RBREAK",21:"RMAIN",22:"RPRINT",23:"PAIZQ",25:"PADER",27:"ID",28:"IGUAL",32:"RIF",34:"RELSE",35:"RWHILE",36:"RDO",37:"RFOR",38:"RRETURN",39:"LLAVEIZQ",40:"LLAVEDER",41:"COMA",55:"MAS",56:"MENOS",57:"POR",58:"DIVISION",59:"POTENCIA",60:"MODULO",61:"IGUALIGUAL",62:"DIFERENTE",63:"MENORQUE",64:"MENORIGUAL",65:"MAYORQUE",66:"MAYORIGUAL",67:"AND",68:"OR",69:"NOT",70:"INCREMENTO",71:"DECREMENTO",72:"RTOLOWER",73:"RTOUPPER",74:"RROUND",75:"RTRUNCATE",76:"RLENGTH",77:"RTYPEOF",78:"RTOSTRING",79:"ENTERO",80:"DECIMAL",81:"CADENA",82:"CARACTER",83:"RTRUE",84:"RFALSE",85:"RINT",86:"RDOUBLE",87:"RCHAR",88:"RSTRING",89:"RBOOLEAN",90:"RVOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[7,5],[8,3],[8,5],[9,4],[29,3],[12,5],[12,6],[13,6],[33,2],[33,2],[33,0],[14,5],[15,7],[16,8],[16,8],[16,8],[16,8],[18,1],[18,2],[30,3],[31,3],[31,1],[42,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[10,3],[10,4],[54,3],[54,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,2],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[45,3],[45,3],[45,2],[46,1],[17,2],[17,2],[48,4],[48,4],[49,4],[50,4],[51,4],[52,4],[53,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 39: case 58:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 8: case 9: case 10: case 11: case 12: case 26: case 27: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53:
 this.$ = $$[$0]; 
break;
case 7: case 13: case 14: case 54:
 this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = new IContinue(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 16:
 this.$ = new IBreak(_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 17:
 this.$ = new InsMain($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 18:
 this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 19:
 this.$ = new Declaration($$[$0-1],$$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 20:
 this.$ = new Declaration($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 21:
 this.$ = new AsignarValor($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 22:
 this.$ = new AsignarValor($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 23:
 this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 24:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 25:
this.$ = new InsIf($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 28:
 this.$ = null;
break;
case 29:
 this.$ = new InWhile($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 30:
 this.$ = new InsDoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 31: case 32: case 33: case 34:
 this.$ = new InsFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 35:
this.$ = new EReturn(null,_$[$0].first_line,_$[$0].first_column); 
break;
case 36:
this.$ = new EReturn($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 37:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 38: case 57:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 40:
 this.$ = new Parametros($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 55:
 this.$ = new LlamadaFuncion($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 56:
 this.$ = new LlamadaFuncion($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 59:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 60:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 62:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 63:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 65:
 this.$ = new Aritmetica($$[$0],$$[$0],tipoAritmetica.MENOSUNARIO,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 66:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.IGUALACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 67:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 68:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 71:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 72:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 73:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 74:
 this.$ = new Logica($$[$0],$$[$0],tipoLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 75:
this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 76:
this.$ = new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 77:
this.$ = new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 78:
this.$ = new ToLowerUpper(1,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 79:
this.$ = new ToLowerUpper(2,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 80:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 81:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 82:
this.$ = new Length($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 83:
this.$ = new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 84:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 85:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.INT);
break;
case 86:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.DOUBLE);
break;
case 87:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.STRING);
break;
case 88:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.CHAR);
break;
case 89: case 90:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.BOOLEAN);
break;
case 91:
this.$ = tipo.INT;
break;
case 92:
this.$ = tipo.DOUBLE;
break;
case 93:
this.$ = tipo.CHAR;
break;
case 94:
this.$ = tipo.STRING;
break;
case 95:
this.$ = tipo.BOOLEAN;
break;
case 96:
this.$ = tipo.VOID;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,22:$V3,26:19,27:$V4,32:$V5,35:$V6,36:$V7,37:$V8,38:$V9,85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,22:$V3,26:19,27:$V4,32:$V5,35:$V6,36:$V7,37:$V8,38:$V9,85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),{11:[1,34]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),{11:[1,35]},{11:[1,36]},{11:[1,37]},{11:[1,38]},{10:39,27:[1,40]},{23:[1,41]},{27:[1,42]},{23:$Vh,28:$Vi,70:$Vj,71:$Vk},{23:[1,47]},{23:[1,48]},{30:49,39:$Vl},{23:[1,51]},{10:59,11:[2,35],17:57,23:$Vm,24:52,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{27:[2,91]},{27:[2,92]},{27:[2,93]},{27:[2,94]},{27:[2,95]},{27:[2,96]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,7]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{11:[1,83]},{23:$Vh},{10:59,17:57,23:$Vm,24:84,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{11:$VD,23:[1,87],28:$VE},{10:59,17:57,23:$Vm,24:88,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:91,25:[1,89],27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,54:90,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},o($VF,[2,76]),o($VF,[2,77]),{10:59,17:57,23:$Vm,24:92,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:93,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{35:[1,94]},{4:95,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,22:$V3,26:19,27:$V4,32:$V5,35:$V6,36:$V7,37:$V8,38:$V9,85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},{8:96,9:97,26:98,27:[1,99],85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},{11:[2,36],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),{10:59,17:57,23:$Vm,24:114,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},o($VF,[2,85]),o($VF,[2,86]),o($VF,[2,87]),o($VF,[2,88]),o($VF,[2,89]),o($VF,[2,90]),{10:59,17:57,23:$Vm,24:115,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},o($VF,$VU,{23:$Vh,70:$Vj,71:$Vk}),{10:59,17:57,23:$Vm,24:116,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{23:[1,117]},{23:[1,118]},{23:[1,119]},{23:[1,120]},{23:[1,121]},{23:[1,122]},{23:[1,123]},o($Vg,[2,17]),{25:[1,124],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VV,[2,19]),{10:59,17:57,23:$Vm,24:125,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{25:[1,126],26:129,31:127,42:128,85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},{11:[1,130],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VF,[2,55]),{25:[1,131],41:[1,132]},o($VW,[2,58],{55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT}),{25:[1,133],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,134],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{23:[1,135]},{6:33,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,20:$V1,21:$V2,22:$V3,26:19,27:$V4,32:$V5,35:$V6,36:$V7,37:$V8,38:$V9,40:[1,136],85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},{10:59,17:57,23:$Vm,24:137,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:138,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{27:[1,139]},{28:$Vi},{10:59,17:57,23:$Vm,24:140,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:141,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:142,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:143,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:144,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:145,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:146,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:147,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:148,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:149,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:150,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:151,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:152,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:153,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{25:[1,154],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VF,[2,74]),o($VF,[2,65]),{10:59,17:57,23:$Vm,24:155,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:156,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:157,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:158,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:159,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:160,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:161,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{11:[1,162]},{11:[1,163],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:164,39:$Vl},{25:[1,165],41:[1,166]},o($VW,[2,39]),{27:[1,167]},o($VV,[2,21]),o($VF,[2,56]),{10:59,17:57,23:$Vm,24:168,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{30:169,39:$Vl},{30:170,39:$Vl},{10:59,17:57,23:$Vm,24:171,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},o([5,19,20,21,22,27,32,34,35,36,37,38,40,85,86,87,88,89,90],[2,37]),{11:[1,172],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{11:[1,173],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{11:$VD,28:$VE},o($VX,[2,66],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o($VX,[2,67],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o($VX,[2,68],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o($VX,[2,69],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o($VX,[2,70],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o($VX,[2,71],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL}),o([11,25,41,59,67,68],[2,72],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o([11,25,41,59,68],[2,73],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS}),o($VY,[2,59],{57:$VI,58:$VJ,60:$VL}),o($VY,[2,60],{57:$VI,58:$VJ,60:$VL}),o($VF,[2,61]),o($VF,[2,62]),o([11,25,41,59],[2,63],{55:$VG,56:$VH,57:$VI,58:$VJ,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT}),o($VF,[2,64]),o($VF,[2,54]),{25:[1,174],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,175],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,176],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,177],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,178],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,179],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,180],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($Vg,[2,18]),o($VV,[2,20]),o($Vg,[2,23]),{30:181,39:$Vl},{26:129,42:182,85:$Va,86:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf},o($VW,[2,40]),o($VW,[2,57],{55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT}),o($Vg,[2,28],{33:183,34:[1,184]}),o($Vg,[2,29]),{25:[1,185],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{10:59,17:57,23:$Vm,24:186,27:$VZ,29:187,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{10:59,17:57,23:$Vm,24:189,27:$VZ,29:190,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},o($VF,[2,78]),o($VF,[2,79]),o($VF,[2,80]),o($VF,[2,81]),o($VF,[2,82]),o($VF,[2,83]),o($VF,[2,84]),o($Vg,[2,24]),o($VW,[2,38]),o($Vg,[2,25]),{13:192,30:191,32:$V5,39:$Vl},{11:[1,193]},{25:[1,194],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,195]},o([25,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$VU,{23:$Vh,28:[1,196],70:$Vj,71:$Vk}),{25:[1,197],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{25:[1,198]},o($Vg,[2,26]),o($Vg,[2,27]),o($Vg,[2,30]),{30:199,39:$Vl},{30:200,39:$Vl},{10:59,17:57,23:$Vm,24:201,27:$Vn,43:53,44:54,45:55,46:56,47:58,48:60,49:61,50:62,51:63,52:64,53:65,56:$Vo,69:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,82:$VA,83:$VB,84:$VC},{30:202,39:$Vl},{30:203,39:$Vl},o($Vg,[2,31]),o($Vg,[2,33]),{25:[2,22],55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($Vg,[2,32]),o($Vg,[2,34])],
defaultActions: {26:[2,91],27:[2,92],28:[2,93],29:[2,94],30:[2,95],31:[2,96],32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("./Instructions/Print");
    const {Primitivo} = require("./Expressions/Primitivo");
    const {tipo} = require("./abstract/Return");
    const {Declaration} = require("./Instructions/Declaration");
    const {Acceso} = require("./Expressions/Acceso");
    const {Aritmetica} = require("./Expressions/Aritmetica");
    const {tipoAritmetica} = require("./utils/TipoAritmetica");
    const {Statement} = require("./Instructions/Statement");
    const {Funcion} = require("./Instructions/Funcion");
    const {Parametros} = require("./Expressions/Parametros");
    const {LlamadaFuncion} = require("./Expressions/LlamadaFuncion");
    const {Relacional} = require("./Expressions/Relacional");
    const {tipoRelacional} = require("./utils/TipoRelacional");
    const {Logica} = require("./Expressions/Logica");
    const {tipoLogico} = require("./utils/TipoLogico");
    const {InsIf} = require("./Instructions/InsIf");
    const {InWhile} = require("./Instructions/InsWhile");
    const {InsDoWhile} = require("./Instructions/InsDoWhile");
    const {InsMain} = require("./Instructions/Main");
    const {AsignarValor} = require("./Instructions/AsignarValor");
    const {Incremento} = require("./Expressions/Incremento");
    const {Decremento} = require("./Expressions/Decremento");
    const {ToLowerUpper} = require("./Expressions/ToLowerUpper");
    const {Round} = require("./Expressions/Round");
    const {Truncate} = require("./Expressions/Truncate");
    const {Length} = require("./Expressions/Length");
    const {TypeOf} = require("./Expressions/TypeOf");
    const {ToString} = require("./Expressions/ToString");
    const {EReturn} = require("./Expressions/EReturn");
    const {IContinue} = require("./Instructions/IContinue");
    const {IBreak} = require("./Instructions/IBreak");
    const {InsFor} = require("./Instructions/InsFor");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 11;
break;
case 5:return 23;
break;
case 6:return 25;
break;
case 7:return "PUNTO";
break;
case 8:return "DOSPUNTOS";
break;
case 9:return "COMA";
break;
case 10:return "CORIZQ";
break;
case 11:return "CORDER";
break;
case 12:return "LLAVEIZQ";
break;
case 13:return "LLAVEDER";
break;
case 14:return "IGUALIGUAL";
break;
case 15:return "MENORIGUAL";
break;
case 16:return "MAYORIGUAL";
break;
case 17:return "INCREMENTO";
break;
case 18:return "DECREMENTO";
break;
case 19:return "IGUAL";
break;
case 20:return "RPRINT"; 
break;
case 21:return "RTRUE";
break;
case 22:return "RFALSE";
break;
case 23:return "RIF";
break;
case 24:return "RELSE";
break;
case 25:return "RWHILE";
break;
case 26:return "RMAIN";
break;
case 27:return "RFOR";
break;
case 28:return "RDO";
break;
case 29:return "RTOLOWER";
break;
case 30:return "RTOUPPER";
break;
case 31:return "RROUND";
break;
case 32:return "RTRUNCATE";
break;
case 33:return "RLENGTH";
break;
case 34:return "RTYPEOF";
break;
case 35:return "RTOSTRING";
break;
case 36:return "RRETURN";
break;
case 37:return "RCONTINUE";
break;
case 38:return "RBREAK";
break;
case 39:return "RINT";
break;
case 40:return "RDOUBLE";
break;
case 41:return "RCHAR";
break;
case 42:return "RSTRING";
break;
case 43:return "RBOOLEAN";
break;
case 44:return "RVOID";
break;
case 45:return "MAS";
break;
case 46:return "MENOS";
break;
case 47:return "POR";
break;
case 48:return "DIVISION";
break;
case 49:return "POTENCIA";
break;
case 50:return "MODULO";
break;
case 51:return "DIFERENTE";
break;
case 52:return "MENORQUE";
break;
case 53:return "MAYORQUE";
break;
case 54:return "AND";
break;
case 55:return "OR";
break;
case 56:return "NOT";
break;
case 57:return "ID";
break;
case 58:return "DECIMAL";
break;
case 59:return "ENTERO";
break;
case 60:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 82;
break;
case 61:cadena = ""; this.begin("string");
break;
case 62:cadena += yy_.yytext;
break;
case 63:cadena += "\"";
break;
case 64:cadena += "\n";
break;
case 65:cadena += "\t";
break;
case 66:cadena += "\\";
break;
case 67:cadena += "\'";
break;
case 68:yy_.yytext=cadena; this.popState(); return 81;
break;
case 69:return "EOF";
break;
case 70:console.error('Este es un error Léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yyloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:main\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:truncate\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:break\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[62,63,64,65,66,67,68],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}