/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[5,18,19,24,29,32,33,34,36,81,82,83,84,85,86],$Ve=[1,36],$Vf=[1,35],$Vg=[1,37],$Vh=[1,38],$Vi=[1,42],$Vj=[1,57],$Vk=[1,65],$Vl=[1,66],$Vm=[1,64],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,71],$Vs=[1,72],$Vt=[1,73],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[1,74],$VB=[1,75],$VC=[17,22,37,51,52,53,54,55,56,57,58,59,60,61,62,63,64],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[2,69],$VS=[5,18,19,20,24,29,32,33,34,36,52,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VT=[22,37],$VU=[17,22,37,55,57,58,59,60,61,62,63,64],$VV=[17,22,37,51,52,55,57,58,59,60,61,62,63,64],$VW=[1,179];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FUNCPRINT":7,"INSDECLARAR":8,"INSASIGNAR":9,"LLAMARFUNCION":10,"GUARDARFUNCION":11,"INSTIF":12,"INSWHILE":13,"INSDOWHILE":14,"INSFOR":15,"INCREMENTODECREMENTO":16,"PCOMA":17,"RMAIN":18,"RPRINT":19,"PAIZQ":20,"EXPRESION":21,"PADER":22,"TIPO":23,"ID":24,"IGUAL":25,"ASIGNARFOR":26,"INSSTATEMENT":27,"PARAMETROS":28,"RIF":29,"INSTELSE":30,"RELSE":31,"RWHILE":32,"RDO":33,"RFOR":34,"LLAVEIZQ":35,"LLAVEDER":36,"COMA":37,"PARAMETRO":38,"PRIMITIVO":39,"RELACIONAL":40,"LOGICO":41,"ACCEDERVARIABLE":42,"ARITMETICA":43,"TOLOWERUPPER":44,"REDONDEO":45,"TRUNCAR":46,"ELENGTH":47,"ETYPEOF":48,"ETOSTRING":49,"ARGUMENTOS":50,"MAS":51,"MENOS":52,"POR":53,"DIVISION":54,"POTENCIA":55,"MODULO":56,"IGUALIGUAL":57,"DIFERENTE":58,"MENORQUE":59,"MENORIGUAL":60,"MAYORQUE":61,"MAYORIGUAL":62,"AND":63,"OR":64,"NOT":65,"INCREMENTO":66,"DECREMENTO":67,"RTOLOWER":68,"RTOUPPER":69,"RROUND":70,"RTRUNCATE":71,"RLENGTH":72,"RTYPEOF":73,"RTOSTRING":74,"ENTERO":75,"DECIMAL":76,"CADENA":77,"CARACTER":78,"RTRUE":79,"RFALSE":80,"RINT":81,"RDOUBLE":82,"RCHAR":83,"RSTRING":84,"RBOOLEAN":85,"RVOID":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"PCOMA",18:"RMAIN",19:"RPRINT",20:"PAIZQ",22:"PADER",24:"ID",25:"IGUAL",29:"RIF",31:"RELSE",32:"RWHILE",33:"RDO",34:"RFOR",35:"LLAVEIZQ",36:"LLAVEDER",37:"COMA",51:"MAS",52:"MENOS",53:"POR",54:"DIVISION",55:"POTENCIA",56:"MODULO",57:"IGUALIGUAL",58:"DIFERENTE",59:"MENORQUE",60:"MENORIGUAL",61:"MAYORQUE",62:"MAYORIGUAL",63:"AND",64:"OR",65:"NOT",66:"INCREMENTO",67:"DECREMENTO",68:"RTOLOWER",69:"RTOUPPER",70:"RROUND",71:"RTRUNCATE",72:"RLENGTH",73:"RTYPEOF",74:"RTOSTRING",75:"ENTERO",76:"DECIMAL",77:"CADENA",78:"CARACTER",79:"RTRUE",80:"RFALSE",81:"RINT",82:"RDOUBLE",83:"RCHAR",84:"RSTRING",85:"RBOOLEAN",86:"RVOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[7,5],[8,3],[8,5],[9,4],[26,3],[11,5],[11,6],[12,6],[30,2],[30,2],[30,0],[13,5],[14,7],[15,8],[15,8],[15,8],[15,8],[27,3],[28,3],[28,1],[38,2],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,3],[10,4],[10,5],[50,3],[50,1],[43,3],[43,3],[43,3],[43,3],[43,3],[43,3],[43,2],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[41,3],[41,3],[41,2],[42,1],[16,2],[16,2],[44,4],[44,4],[45,4],[46,4],[47,4],[48,4],[49,4],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 34: case 52:
 this.$ = [$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 23: case 24: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47:
 this.$ = $$[$0]; 
break;
case 13: case 48:
 this.$ = $$[$0-1]; 
break;
case 14:
 this.$ = new InsMain($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 15:
 this.$ = new Print(_$[$0-4].first_line,_$[$0-4].first_column,$$[$0-2]);
break;
case 16:
 this.$ = new Declaration($$[$0-1],$$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 17:
 this.$ = new Declaration($$[$0-3],$$[$0-4],$$[$0-1],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 18:
 this.$ = new AsignarValor($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 19:
 this.$ = new AsignarValor($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 20:
 this.$ = new Funcion($$[$0-4],$$[$0-3],[],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 21:
 this.$ = new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 22:
this.$ = new InsIf($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 25:
 this.$ = null;
break;
case 26:
 this.$ = new InWhile($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 27:
 this.$ = new InsDoWhile($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 28: case 29: case 30: case 31:
 this.$ = new InsFor($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 32:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 33: case 51:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 35:
 this.$ = new Parametros($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 49:
 this.$ = new LlamadaFuncion($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 50:
 this.$ = new LlamadaFuncion($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 53:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.SUMA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 54:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.RESTA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 55:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 56:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 57:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 58:
 this.$ = new Aritmetica($$[$0-2],$$[$0],tipoAritmetica.MODULO,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 59:
 this.$ = new Aritmetica($$[$0],$$[$0],tipoAritmetica.MENOSUNARIO,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.IGUALACION,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 61:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 62:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 63:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 64:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 65:
 this.$ = new Relacional($$[$0-2],$$[$0],tipoRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 66:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.AND,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 67:
 this.$ = new Logica($$[$0-2],$$[$0],tipoLogico.OR,_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 68:
 this.$ = new Logica($$[$0],$$[$0],tipoLogico.NOT,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 69:
this.$ = new Acceso($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 70:
this.$ = new Incremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 71:
this.$ = new Decremento($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 72:
this.$ = new ToLowerUpper(1,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 73:
this.$ = new ToLowerUpper(2,$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 74:
this.$ = new Round($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 75:
this.$ = new Truncate($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 76:
this.$ = new Length($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 77:
this.$ = new TypeOf($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 78:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 79:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.INT);
break;
case 80:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.DOUBLE);
break;
case 81:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.STRING);
break;
case 82:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.CHAR);
break;
case 83: case 84:
this.$ = new Primitivo(_$[$0].first_line,_$[$0].first_column,$$[$0], tipo.BOOLEAN);
break;
case 85:
this.$ = tipo.INT;
break;
case 86:
this.$ = tipo.DOUBLE;
break;
case 87:
this.$ = tipo.CHAR;
break;
case 88:
this.$ = tipo.STRING;
break;
case 89:
this.$ = tipo.BOOLEAN;
break;
case 90:
this.$ = tipo.VOID;
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:16,24:$V2,29:$V3,32:$V4,33:$V5,34:$V6,81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},{1:[3]},{5:[1,28],6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:16,24:$V2,29:$V3,32:$V4,33:$V5,34:$V6,81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),{17:[1,30]},{10:31,24:[1,32]},{20:[1,33]},{24:[1,34]},{20:$Ve,25:$Vf,66:$Vg,67:$Vh},{20:[1,39]},{20:[1,40]},{27:41,35:$Vi},{20:[1,43]},{24:[2,85]},{24:[2,86]},{24:[2,87]},{24:[2,88]},{24:[2,89]},{24:[2,90]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,13]),o($Vd,[2,14]),{20:$Ve},{16:49,20:$Vj,21:44,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{17:$VA,20:[1,76],25:$VB},{16:49,20:$Vj,21:77,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:80,22:[1,78],24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,50:79,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},o($VC,[2,70]),o($VC,[2,71]),{16:49,20:$Vj,21:81,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:82,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{32:[1,83]},{4:84,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:16,24:$V2,29:$V3,32:$V4,33:$V5,34:$V6,81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},{8:85,9:86,23:87,24:[1,88],81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},{22:[1,89],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),o($VC,[2,41]),o($VC,[2,42]),o($VC,[2,43]),o($VC,[2,44]),o($VC,[2,45]),o($VC,[2,46]),o($VC,[2,47]),{16:49,20:$Vj,21:104,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},o($VC,[2,79]),o($VC,[2,80]),o($VC,[2,81]),o($VC,[2,82]),o($VC,[2,83]),o($VC,[2,84]),{16:49,20:$Vj,21:105,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},o($VC,$VR,{66:$Vg,67:$Vh}),{16:49,20:$Vj,21:106,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{20:[1,107]},{20:[1,108]},{20:[1,109]},{20:[1,110]},{20:[1,111]},{20:[1,112]},{20:[1,113]},o($VS,[2,16]),{16:49,20:$Vj,21:114,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{22:[1,115],23:118,28:116,38:117,81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},{17:[1,119],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{17:[1,120]},{22:[1,121],37:[1,122]},o($VT,[2,52],{51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),{22:[1,123],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,124],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{20:[1,125]},{6:29,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,18:$V0,19:$V1,23:16,24:$V2,29:$V3,32:$V4,33:$V5,34:$V6,36:[1,126],81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},{16:49,20:$Vj,21:127,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:128,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{24:[1,129]},{25:$Vf},{17:[1,130]},{16:49,20:$Vj,21:131,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:132,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:133,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:134,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:135,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:136,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:137,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:138,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:139,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:140,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:141,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:142,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:143,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:144,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{22:[1,145],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},o($VC,[2,68]),o($VC,[2,59]),{16:49,20:$Vj,21:146,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:147,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:148,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:149,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:150,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:151,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:152,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{17:[1,153],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{27:154,35:$Vi},{22:[1,155],37:[1,156]},o($VT,[2,34]),{24:[1,157]},o($VS,[2,18]),o($Vd,[2,49]),{17:[1,158]},{16:49,20:$Vj,21:159,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{27:160,35:$Vi},{27:161,35:$Vi},{16:49,20:$Vj,21:162,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},o([5,18,19,24,29,31,32,33,34,36,81,82,83,84,85,86],[2,32]),{17:[1,163],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{17:[1,164],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{17:$VA,25:$VB},o($Vd,[2,15]),o($VU,[2,60],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o($VU,[2,61],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o($VU,[2,62],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o($VU,[2,63],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o($VU,[2,64],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o($VU,[2,65],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI}),o([17,22,37,55,63,64],[2,66],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO}),o([17,22,37,55,64],[2,67],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP}),o($VV,[2,53],{53:$VF,54:$VG,56:$VI}),o($VV,[2,54],{53:$VF,54:$VG,56:$VI}),o($VC,[2,55]),o($VC,[2,56]),o([17,22,37,55],[2,57],{51:$VD,52:$VE,53:$VF,54:$VG,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($VC,[2,58]),o($VC,[2,48]),{22:[1,165],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,166],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,167],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,168],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,169],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,170],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,171],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},o($VS,[2,17]),o($Vd,[2,20]),{27:172,35:$Vi},{23:118,38:173,81:$V7,82:$V8,83:$V9,84:$Va,85:$Vb,86:$Vc},o($VT,[2,35]),o($Vd,[2,50]),o($VT,[2,51],{51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ}),o($Vd,[2,25],{30:174,31:[1,175]}),o($Vd,[2,26]),{22:[1,176],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{16:49,20:$Vj,21:177,24:$VW,26:178,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{16:49,20:$Vj,21:180,24:$VW,26:181,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},o($VC,[2,72]),o($VC,[2,73]),o($VC,[2,74]),o($VC,[2,75]),o($VC,[2,76]),o($VC,[2,77]),o($VC,[2,78]),o($Vd,[2,21]),o($VT,[2,33]),o($Vd,[2,22]),{12:183,27:182,29:$V3,35:$Vi},{17:[1,184]},{22:[1,185],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,186]},o([22,51,52,53,54,55,56,57,58,59,60,61,62,63,64],$VR,{25:[1,187],66:$Vg,67:$Vh}),{22:[1,188],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},{22:[1,189]},o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,27]),{27:190,35:$Vi},{27:191,35:$Vi},{16:49,20:$Vj,21:192,24:$Vk,39:45,40:46,41:47,42:48,43:50,44:51,45:52,46:53,47:54,48:55,49:56,52:$Vl,65:$Vm,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz},{27:193,35:$Vi},{27:194,35:$Vi},o($Vd,[2,28]),o($Vd,[2,30]),{22:[2,19],51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ},o($Vd,[2,29]),o($Vd,[2,31])],
defaultActions: {22:[2,85],23:[2,86],24:[2,87],25:[2,88],26:[2,89],27:[2,90],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("./Instructions/Print");
    const {Primitivo} = require("./Expressions/Primitivo");
    const {tipo} = require("./abstract/Return");
    const {Declaration} = require("./Instructions/Declaration");
    const {Acceso} = require("./Expressions/Acceso");
    const {Aritmetica} = require("./Expressions/Aritmetica");
    const {tipoAritmetica} = require("./utils/TipoAritmetica");
    const {Statement} = require("./Instructions/Statement");
    const {Funcion} = require("./Instructions/Funcion");
    const {Parametros} = require("./Expressions/Parametros");
    const {LlamadaFuncion} = require("./Expressions/LlamadaFuncion");
    const {Relacional} = require("./Expressions/Relacional");
    const {tipoRelacional} = require("./utils/TipoRelacional");
    const {Logica} = require("./Expressions/Logica");
    const {tipoLogico} = require("./utils/TipoLogico");
    const {InsIf} = require("./Instructions/InsIf");
    const {InWhile} = require("./Instructions/InsWhile");
    const {InsDoWhile} = require("./Instructions/InsDoWhile");
    const {InsMain} = require("./Instructions/Main");
    const {AsignarValor} = require("./Instructions/AsignarValor");
    const {Incremento} = require("./Expressions/Incremento");
    const {Decremento} = require("./Expressions/Decremento");
    const {ToLowerUpper} = require("./Expressions/ToLowerUpper");
    const {Round} = require("./Expressions/Round");
    const {Truncate} = require("./Expressions/Truncate");
    const {Length} = require("./Expressions/Length");
    const {TypeOf} = require("./Expressions/TypeOf");
    const {ToString} = require("./Expressions/ToString");
    const {InsFor} = require("./Instructions/InsFor");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 17;
break;
case 5:return 20;
break;
case 6:return 22;
break;
case 7:return "PUNTO";
break;
case 8:return "DOSPUNTOS";
break;
case 9:return "COMA";
break;
case 10:return "CORIZQ";
break;
case 11:return "CORDER";
break;
case 12:return "LLAVEIZQ";
break;
case 13:return "LLAVEDER";
break;
case 14:return "IGUALIGUAL";
break;
case 15:return "MENORIGUAL";
break;
case 16:return "MAYORIGUAL";
break;
case 17:return "INCREMENTO";
break;
case 18:return "DECREMENTO";
break;
case 19:return "IGUAL";
break;
case 20:return "RPRINT"; 
break;
case 21:return "RTRUE";
break;
case 22:return "RFALSE";
break;
case 23:return "RIF";
break;
case 24:return "RELSE";
break;
case 25:return "RWHILE";
break;
case 26:return "RMAIN";
break;
case 27:return "RFOR";
break;
case 28:return "RDO";
break;
case 29:return "RTOLOWER";
break;
case 30:return "RTOUPPER";
break;
case 31:return "RROUND";
break;
case 32:return "RTRUNCATE";
break;
case 33:return "RLENGTH";
break;
case 34:return "RTYPEOF";
break;
case 35:return "RTOSTRING";
break;
case 36:return "RINT";
break;
case 37:return "RDOUBLE";
break;
case 38:return "RCHAR";
break;
case 39:return "RSTRING";
break;
case 40:return "RBOOLEAN";
break;
case 41:return "RVOID";
break;
case 42:return "MAS";
break;
case 43:return "MENOS";
break;
case 44:return "POR";
break;
case 45:return "DIVISION";
break;
case 46:return "POTENCIA";
break;
case 47:return "MODULO";
break;
case 48:return "DIFERENTE";
break;
case 49:return "MENORQUE";
break;
case 50:return "MAYORQUE";
break;
case 51:return "AND";
break;
case 52:return "OR";
break;
case 53:return "NOT";
break;
case 54:return "ID";
break;
case 55:return "DECIMAL";
break;
case 56:return "ENTERO";
break;
case 57:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);return 78;
break;
case 58:cadena = ""; this.begin("string");
break;
case 59:cadena += yy_.yytext;
break;
case 60:cadena += "\"";
break;
case 61:cadena += "\n";
break;
case 62:cadena += "\t";
break;
case 63:cadena += "\\";
break;
case 64:cadena += "\'";
break;
case 65:yy_.yytext=cadena; this.popState(); return 77;
break;
case 66:return "EOF";
break;
case 67:console.error('Este es un error Léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yyloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:==)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:=)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:main\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:truncate\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[59,60,61,62,63,64,65],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}